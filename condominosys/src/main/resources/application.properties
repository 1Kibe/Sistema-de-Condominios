spring.application.name=condominosys

# Banco de dados MySQL
spring.datasource.url=jdbc:mysql://localhost:3306/CondominioAPIJava?createDatabaseIfNotExist=true&useSSL=false&serverTimezone=America/Sao_Paulo
spring.datasource.username=
spring.datasource.password=
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
server.port=8080

# JPA / Hibernate
# Durante a criação inicial com Flyway você pode usar: spring.jpa.hibernate.ddl-auto=none
# Depois de ter migrations rodando, use 'validate' em dev/prod para garantir que o modelo JPA bate com o DB
#Usa-se inicialmente para criar as primeiras tabelas, e pra gerar novas tabelas
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

#Ela faz com que o Hibernate imprima no console o SQL que seria usado para atualizar o banco, em vez de aplicar diretamente.
#spring.jpa.properties.hibernate.hbm2ddl.schema_update_script_source=stdout

# Flyway (opções comuns)
spring.flyway.enabled=true
spring.flyway.locations=classpath:db/migration
# se você já tem um BD com tabelas criadas e quer "adotar" Flyway sem recriar tudo:
spring.flyway.baseline-on-migrate=true
# spring.flyway.baseline-version=1   # (opcional) define versão de base; Spring Boot pode não expor todas as configs antigas — ver docs
# outros: spring.flyway.out-of-order=true, spring.flyway.table=flyway_schema_history

#cria um schema de migration inicial depois que ja tiver tabelas no db (usar comando da linha 14)
#mysqldump -u SEU_USUARIO -p --no-data --databases NomeBancoDeDados > V1__initial_schema.sql